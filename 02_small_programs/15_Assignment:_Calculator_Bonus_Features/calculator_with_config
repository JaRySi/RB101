LANGUAGE = 'nl'
require 'yaml'
MESSAGES = YAML.load_file 'calculator_messages.yml'

def messages(message, lang='en')
  MESSAGES[lang][message]
end

=begin
1: We can use (num.to_i.to_s == num) for validation.

2: We can use .to_f instead of .to_i. (Float instead of integer conversion)
I also converted from .to_i to .to_f inside the operator case, so decimals
can be used with all operations.

3: We can saved the return value of the case to a variable.
We then put that variable at the last line of the case.

4: I had no idea how to do this, but I did it after looking at the solution.

5: That was cool!
=end

def prompt(key, v)
  message = messages(key, LANGUAGE)
  puts(format("=> #{message}", value: v))
end

def float?(num)
  num.to_f.to_s == num
end

def integer?(num)
  num.to_i.to_s == num
end

def valid_number?(num)
  integer?(num) || float?(num)
end

def operation_to_message(op)
  word = case op
         when '1'
           'add'
         when '2'
           'subtract'
         when '3'
           'multiply'
         when '4'
           'divide'
         end

  messages(word, LANGUAGE)
end

prompt 'welcome', ''

name = ''
loop do
  name = gets.chomp
  if name.empty?
    prompt 'valid_name', ''
  else
    break
  end
end

prompt 'greeting', name

loop do # Main loop
  number1 = ''
  loop do
    prompt 'first_number', ''
    number1 = gets.chomp

    if valid_number? number1
      break
    else
      prompt 'not_valid', ''
    end
  end

  number2 = ''
  loop do
    prompt 'second_number', ''
    number2 = gets.chomp

    if valid_number? number2
      break
    else
      prompt 'not_valid', ''
    end
  end

  prompt 'operator_options', ''

  operator = ''
  loop do
    operator = gets.chomp

    if %w(1 2 3 4).include? operator
      break
    else
      prompt 'must_choose', ''
    end
  end

  prompt 'operating_message', operation_to_message(operator)

  result = case operator
           when '1'
             number1.to_f + number2.to_f
           when '2'
             number1.to_f - number2.to_f
           when '3'
             number1.to_f * number2.to_f
           when '4'
             number1.to_f / number2.to_f
           end

  prompt 'result', result

  prompt 'another_calculation', ''
  answer = gets.chomp
  break unless answer.downcase.start_with? 'y'
end

prompt 'goodbye', ''
